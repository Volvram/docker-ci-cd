name: Build and Push Docker Stack

on: [push]

env:
  APP_VERSION: ${{ github.sha }}  # Версия = хеш коммита

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Сборка node-optimized (production)
      - name: Build node-optimized
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/node-optimized:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/node-optimized:${{ env.APP_VERSION }}

      # Сборка node-regular (development)
      - name: Build node-regular
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile_non_optimized
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/node-regular:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/node-regular:${{ env.APP_VERSION }}

      # Запуск всего стека и тестирование
      - name: Test stack
        run: |
          docker run -d --name mongo -p 27017:27017 \
            -v mongo_data:/data/db \
            mongo:6 \
          
          echo "Waiting for MongoDB to start..."
          while ! docker exec mongo mongosh --eval "db.adminCommand('ping')" >/dev/null 2>&1; do
            sleep 2
          done
          
          docker run -d --name node-opt \
            -p 3001:3000 \
            -e NODE_ENV=production \
            --link mongo \
            ${{ secrets.DOCKER_HUB_USERNAME }}/node-optimized:${{ env.APP_VERSION }}
          
          docker run -d --name node-dev \
            -p 3000:3000 \
            -e NODE_ENV=development \
            --link mongo \
            ${{ secrets.DOCKER_HUB_USERNAME }}/node-regular:${{ env.APP_VERSION }}
          
          docker run -d --name nginx \
            -p 80:80 \
            -v $(pwd)/nginx/nginx.conf:/etc/nginx/conf.d/default.conf \
            --link node-opt \
            nginx:alpine
          
          sleep 10
          
          echo  "Testing production (via nginx)..."
          curl -s http://localhost:80 | grep "Hello from" || exit 1
          
          echo "Testing development..."
          curl -s http://localhost:3000 | grep "Hello from" || exit 1
          
          echo "Testing MongoDB connection..."
          docker exec $$(docker-compose -f docker-compose.ci.yml ps -q node-optimized) \
            node -e "require('mongoose').connect('mongodb://mongo:27017/mydb').then(() => process.exit(0)).catch(e => { console.error(e); process.exit(1) })"

      - name: Debug logs
        if: always()
        run: |
          docker node-opt logs

      - name: Cleanup
        if: always()
        run: |
            docker stop node-opt node-dev nginx mongo || true
            docker rm node-opt node-dev nginx mongo || true
            docker volume rm mongo_data || true